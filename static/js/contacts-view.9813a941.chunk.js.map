{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","views/ContactsView/Contacts.module.css","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","variables/motionVariable.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","views/ContactsView/ContactsView.js"],"names":["module","exports","fetchContacts","dispatch","a","fetchContactsRequest","axios","get","data","fetchContactsSuccess","fetchContactsError","message","addContact","name","number","contact","addContactRequest","post","then","addContactSuccess","catch","error","addContactError","deleteContact","id","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","getContacts","state","contacts","items","getLoading","isLoading","getError","getFilter","filter","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","variants","initial","scale","animate","exit","transition","ease","duration","ContactList","useDispatch","visibleContacts","useSelector","contactsSelectors","length","motion","ul","className","styles","list","AnimatePresence","map","li","item","info","link","href","IconButton","variant","color","type","title","onClick","contactsOperations","ContactForm","useState","setName","setNumber","handleChange","event","currentTarget","value","form","onSubmit","e","preventDefault","find","checkName","checkNumber","alert","label","input","pattern","required","onChange","placeholder","mask","Button","Filter","contactsActions","filterContact","target","ContactsView","useEffect","wrapper","title_header"],"mappings":"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","file":"static/js/contacts-view.9813a941.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\",\"item\":\"ContactList_item__3YsZK\",\"info\":\"ContactList_info__DNDkd\",\"message\":\"ContactList_message__3t9YT\",\"link\":\"ContactList_link__mIg_d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"label\":\"ContactForm_label__378f8\",\"input\":\"ContactForm_input__gm87B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__3DcZT\",\"input\":\"Filter_input__2DoVp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Contacts_wrapper__23SxN\",\"title_header\":\"Contacts_title_header__2v0Iu\",\"title\":\"Contacts_title__3wRQH\"};","import axios from 'axios';\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} from './contacts-actions';\n\nexport const fetchContacts = () => async dispatch => {\n  dispatch(fetchContactsRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error.message));\n  }\n};\n\nexport const addContact = (name, number) => dispatch => {\n  const contact = {\n    name,\n    number,\n  };\n\n  dispatch(addContactRequest());\n\n  axios\n    .post('/contacts', contact)\n    .then(({ data }) => dispatch(addContactSuccess(data)))\n    .catch(error => dispatch(addContactError(error)));\n};\n\nexport const deleteContact = id => dispatch => {\n  dispatch(deleteContactRequest());\n\n  axios\n    .delete(`contacts/${id}`)\n    .then(() => dispatch(deleteContactSuccess(id)))\n    .catch(error => dispatch(deleteContactError(error)));\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n","export const variants = {\n  initial: { scale: 0 },\n  animate: { scale: 1 },\n  exit: { scale: 0.5 },\n  transition: { ease: 'easeIn', duration: 0.5 },\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { variants } from '../../variables/motionVariable';\nimport styles from './ContactList.module.css';\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(contactsSelectors.getVisibleContacts);\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const error = useSelector(contactsSelectors.getError);\n\n  return (\n    <>\n      {contacts.length > 0 && !error ? (\n        <motion.ul className={styles.list}>\n          <AnimatePresence>\n            {visibleContacts.map(({ id, name, number }) => (\n              <motion.li\n                className={styles.item}\n                key={id}\n                initial=\"initial\"\n                animate=\"animate\"\n                exit=\"exit\"\n                transition=\"transition\"\n                variants={variants}\n              >\n                <p className={styles.info}>\n                  <em>{name}</em>\n\n                  <em>\n                    <a className={styles.link} href={`tel:${number}`}>\n                      {number}\n                    </a>\n                  </em>\n                </p>\n                <IconButton\n                  aria-label=\"delete\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  type=\"button\"\n                  title=\"Вилучити\"\n                  onClick={() => dispatch(contactsOperations.deleteContact(id))}\n                >\n                  <DeleteIcon />\n                </IconButton>\n              </motion.li>\n            ))}\n          </AnimatePresence>\n        </motion.ul>\n      ) : (\n        <p className={styles.message}>\n          Наразі у вашій телефонній книзі немає контактів. Будь ласка, додайте їх.\n        </p>\n      )}\n    </>\n  );\n}\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts/';\nimport styles from './ContactForm.module.css';\nimport InputMask from 'react-input-mask';\nimport Button from '@material-ui/core/Button';\n\nexport default function ContactForm() {\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const resetName = () => {\n    setName('');\n  };\n\n  const resetNumber = () => {\n    setNumber('');\n  };\n\n  const checkName = name => {\n    return contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n  };\n\n  const checkNumber = number => {\n    return contacts.find(contact => contact.number === number);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (checkName(name)) {\n      alert(`${name} вже присутній у списку контактів!`);\n    } else if (checkNumber(number)) {\n      alert(`${number} вже присутній у списку контактів!`);\n    } else {\n      dispatch(contactsOperations.addContact(name, number));\n    }\n\n    resetName();\n    resetNumber();\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label className={styles.label}>\n        Ім'я\n        <input\n          className={styles.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Ім'я може складатись лише із букв, апострофа, тире та пробілів. Наприклад Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan і т.д.\"\n          required\n          value={name}\n          onChange={handleChange}\n          placeholder=\"Sylvester Stalone\"\n        />\n      </label>\n\n      <label className={styles.label}>\n        Номер\n        <InputMask\n          className={styles.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефону може складатись з цифр і може скаладтись з пробілів, тире, круглих дужок і може починатись з +\"\n          required\n          onChange={handleChange}\n          value={number}\n          placeholder=\"+38 (099) 999-99-99\"\n          mask=\"+38 (099) 999-99-99\"\n        />\n      </label>\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        type=\"submit\"\n        title=\"Add contact\"\n      >\n        Додати контакт\n      </Button>\n    </form>\n  );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport { contactsActions, contactsSelectors } from '../../redux/contacts';\nimport styles from './Filter.module.css';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(contactsSelectors.getFilter);\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const error = useSelector(contactsSelectors.getError);\n\n  return (\n    <>\n      {contacts.length > 1 && !error && (\n        <label className={styles.label}>\n          <input\n            className={styles.input}\n            type=\"text\"\n            value={filter}\n            placeholder=\"Пошук...\"\n            onChange={event =>\n              dispatch(contactsActions.filterContact(event.target.value))\n            }\n          />\n        </label>\n      )}\n    </>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport ContactList from '../../components/ContactList';\nimport ContactForm from '../../components/ContactForm';\nimport Filter from '../../components/Filter';\nimport { contactsOperations } from '../../redux/contacts';\nimport styles from './Contacts.module.css';\n\nexport default function ContactsView() {\n  const dispatch = useDispatch();\n\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\n\n  return (\n    <div className={styles.wrapper}>\n      <h1 className={styles.title_header}>Телефонний довідник</h1>\n      <ContactForm />\n      <h2 className={styles.title}>Контакти</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n"],"sourceRoot":""}